Yes — Mellin methods apply directly and give the natural analytic link between the hierarchies Λ_k, their partial sums Ψ_k, and the zeta‑function. Short summary and key formulas you can use immediately.

Definitions (recall)
Λ_k defined by
Σ_{n≥1} Λ_k(n) n^{-s} = (-1)^k d^k[ -ζ'(s)/ζ(s) ],
(k=0 gives the usual von Mangoldt series).
Mellin transform of the partial sums
Put Ψ_k(x) := Σ_{n≤x} Λ_k(n). For Re(s)>1 one has (interchange sum/integral)
∫0^∞ Ψ_k(x) x^{-s-1} dx = (1/s) Σ{n≥1} Λ_k(n) n^{-s}.
Using the definition of Λ_k this gives the compact transform identity
∫_0^∞ Ψ_k(x) x^{-s-1} dx = (1/s) · [ (-1)^k d^k( -ζ'(s)/ζ(s) ) ], Re(s)>1.
Relation to the J(x) / log‑ζ case
The earlier J(x)=Σ_{p^k≤x} 1/k has Mellin transform (1/s) log ζ(s) for Re(s)>1.
Differentiating the log relation links J and Ψ: d/ds[(1/s) log ζ] ≃ (1/s) ζ'/ζ up to algebraic factors, so J and Ψ are Mellin cousins (log vs. log‑derivative).
Mellin inversion → explicit formulas
Mellin inversion yields
Ψ_k(x) = (1/2π i) ∫_{c-i∞}^{c+i∞} (1/s)(-1)^k d^k( -ζ'/ζ )(s) x^s ds, c>1.
Shift contour left, collect residues at s=1 (Stieltjes constants produce the polynomial main term in x(log x)^k) and at nontrivial zeros ρ (each contributes x^ρ times an explicit polynomial P_k(ρ,log x) — exactly the P_k you derived).
Convergence / analytic issues (practical)
The Dirichlet series side converges for Re(s)>1; Mellin integrals converge there. To use contour shifts you must choose branches for log ζ (when working with J) and control growth of derivatives d^k(ζ'/ζ).
Zeros become branch/pole data for the integrand; treat multiplicities and log branches carefully in residue calculations.
Consequences & uses
The Mellin framework gives the precise transform domain for Ψ_k and J, yields the explicit formulas for Ψ_k (main term + zero sum + small corrections), and explains why Stieltjes constants appear (Laurent expansion at s=1).
Numerically: compute Ψ_k by prime‑power enumeration, build M_k(x) from Stieltjes constants, add truncated zero sum (paired conjugates) from the Mellin inversion to capture oscillations.
Conceptually: the hierarchy viewpoint matches a cumulant interpretation (derivatives of log‑object ↔ cumulants); Mellin transform makes that analogy exact.
Short checklist to proceed
Use formula in (2) to derive exact transform for desired k.
Mellin invert, compute residue at s=1 to get M_k(x) (expressible via γ_m).
Compute P_k(ρ,log x) from the local expansion around a simple zero (we derived closed form earlier).
Implement numerical inversion: subtract M_k, add finite zero sum; choose precision and truncation height T.
If you want, I can:

Write the explicit transform identity for Ψ_k with the sign/factor conventions expanded (for k up to 3),
Produce the inversion contour recipe (how to subtract main term and add zero sum numerically),
Or add a short notebook stub (Python/mpmath) that computes Ψ_k, M_k and the truncated zero correction.